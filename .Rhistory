27.82
27.84
27.98
27.89
27.8
27.9
27.87
27.94
28.02
27.91
27.72
27.77
27.78
27.79
27.72
27.75
27.67
27.61
27.69
27.64
27.47
27.55
27.42
27.64
27.63
27.69
27.65
27.74
27.75
27.67
27.82
27.74
27.81
27.81
27.84
27.92
27.81
27.86
27.84
27.84
27.8
27.83
27.82
27.86
27.84
27.83
27.89
27.79
27.87
27.84
27.67
27.69
27.73
27.7
27.67
27.69
27.72
27.73
27.8
27.77
27.67
27.69
27.75
27.77
27.87
27.8
27.88
27.76
27.76
27.74
27.7
27.7
27.81
27.79
27.89
27.77
27.78
27.77
27.76
27.8
27.93
28
28.06
27.94
27.97
28.01
28.13
27.89
27.94
27.94
27.94
27.83
27.86
27.93
27.91
27.83
27.81
27.89
27.97
27.81
27.91
27.93
27.96
27.93
27.92
28
27.98
27.89
28
28
28.06
28
27.84
27.92
27.89
27.91
27.94
27.93
27.94
27.98
27.97
27.87
27.78
27.89
27.94
27.91
27.95
28.01
27.97
27.96
27.93
27.79
27.82
27.73
27.81
27.83,sep = '\t')
a = c(1,2,3,3,1,4,4,,2,23,23,4,1213,2,2,3,4,5,,6,1,23,5)
a = c(1,2,3,3,1,4,4,,2,23,23,4,1213,2,2,3,4,5,6,1,23,5)
hist(a,probability = 1)
a = c(1,2,3,3,1,4,4,2,23,23,4,1213,2,2,3,4,5,6,1,23,5)
hist(a,probability = 1)
hist(a)
a = c(1,2,3,3,1,4,4,2,23,23,4,12,13,2,2,3,4,5,6,1,23,5)
hist(a,probability = 1)
?kmeans
?faithful
shiny::runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/quiz5/Clustering')
runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/quiz5/Clustering')
install.packages(shinydashboard)
install.packages('shinydashboard')
install.packages('shinydashboard')
install.packages("shinydashboard")
updateR()
updateR()
runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/hw4_shiny/BMI')
runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/hw4_shiny/BMI')
runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/quiz5/Clustering')
updateR()
library(installr)
updateR()
updateR()
setInternet2(TRUE)
roiDir = "C:/Users/lcqi/OneDrive/Desktop/mri/mri_proj/data"
fileList = dir(roiDir)
fullPath = paste(roiDir, fileList[1], sep = "")
dat = readSubject(fullPath)
library(tidyverse)
library(tidyverse)
library(MRIcloudT1volumetrics)
dat = readSubject(fullPath)
library(MRIcloudT1volumetrics)
dat = readSubject(fullPath)
setInternet2(TRUE)
setInternet2(TRUE)
setInternet2(TRUE)
dat = readSubject(fullPath)
setInternet2(use = TRUE)
library(installr)
library(tidyverse)
library(tidyverse)
install.packages('backports')
library(tidyverse)
library(MRIcloudT1volumetrics)
roiDir = "C:/Users/lcqi/OneDrive/Desktop/mri/mri_proj/data"
fileList = dir(roiDir)
#type = 1, level = 1
# dat = dat %>% mutate(volume_demean = volume - mean(volume))%>% select(roi,volume_demean)%>% spread(roi,volume_demean)
dat = c()
library(tidyverse)
library(MRIcloudT1volumetrics)
roiDir = "C:/Users/lcqi/OneDrive/Desktop/mri/mri_proj/data"
fileList = dir(roiDir)
#type = 1, level = 1
# dat = dat %>% mutate(volume_demean = volume - mean(volume))%>% select(roi,volume_demean)%>% spread(roi,volume_demean)
dat = c()
for (i in 1:length(fileList)){
fullPath = paste(roiDir, fileList[i], sep = "/")
raw_dat = readSubject(fullPath) %>% subject2df()
dat_each = raw_dat %>% filter(type == 1, level == 1) %>% select(roi,volume) %>% spread(roi,volume)
dat = rbind(dat,dat_each)
}
pca.result = prcomp(dat, scale. = T)
library(factoextra)
ev = get_eig(pca.result)
# ev = pca.result$sdev^2
fviz_eig(pca.result)
summary(pca.result)
# library(ggfortify)
# library(cluster)
# autoplot(clara(dat, 3))
prop.table
?prop.table
dat_proportion = prop.table(dat,margin = 1)
dat_proportion = prop.table(as.matrix(dat),margin = 1)
View(dat_proportion)
log(matrix(c(1,2,3,4,5,6),2))
dat_proportion = prop.table(as.matrix(dat),margin = 1) %>% log()
pca.result = prcomp(dat_proportion,scale. = T)
dat_proportion = prop.table(as.matrix(dat),margin = 1) %>% log()
pca.result = prcomp(dat_proportion,scale. = T)
ev = get_eig(pca.result)
fviz_eig(pca.result)
summary(pca.result)
library(tidyverse)
library(MRIcloudT1volumetrics)
roiDir = "C:/Users/lcqi/OneDrive/Desktop/mri/mri_proj/data"
fileList = dir(roiDir)
#type = 1, level = 1
# dat = dat %>% mutate(volume_demean = volume - mean(volume))%>% select(roi,volume_demean)%>% spread(roi,volume_demean)
dat = c()
for (i in 1:length(fileList)){
fullPath = paste(roiDir, fileList[i], sep = "/")
raw_dat = readSubject(fullPath) %>% subject2df()
dat_each = raw_dat %>% filter(type == 1, level == 1) %>% select(roi,volume) %>% spread(roi,volume)
dat = rbind(dat,dat_each)
}
#preprocess
library(tidyverse)
library(magrittr)
dat = read.csv('updated_encoding_BLCA.csv',header = 1,row.names = 1)
b = apply(dat,1,sum)
a = length(dat[1,])-b
rawdat = as.data.frame(cbind(a,b) %>% `colnames<-`(c('0','1')))
#preprocess
library(tidyverse)
library(magrittr)
dat = read.csv('updated_encoding_BLCA.csv',header = 1,row.names = 1)
b = apply(dat,1,sum)
a = length(dat[1,])-b
rawdat = as.data.frame(cbind(a,b) %>% `colnames<-`(c('0','1')))
#mutually co occurrence test
combinations = combn(1:length(dat[,1]),2)
fisher_results = c()
chisq_results = c()
for (i in 1:length(combinations[1,])){
id = combinations[,i]
ts = rawdat[id,]
if(fisher.test(ts)$p == 1){
fisher_results = rbind(fisher_results,c(row.names(ts),fisher.test(ts)$p))
}
if(chisq.test(ts,correct = FALSE)$p.value == 1){
chisq_results=rbind(chisq_results,c(row.names(ts),chisq.test(ts,correct = FALSE)$p.value))
}
}
combinations = combn(1:length(dat[,1]),2)
fisher_results = c()
chisq_results = c()
for (i in 1:length(combinations[1,])){
id = combinations[,i]
ts = rawdat[id,]
if(fisher.test(ts)$p == 1){
fisher_results = rbind(fisher_results,c(row.names(ts),fisher.test(ts)$p))
}
if(chisq.test(ts,correct = FALSE)$p.value == 1){
chisq_results=rbind(chisq_results,c(row.names(ts),chisq.test(ts,correct = FALSE)$p.value))
}
}
fisher.test(matrix(c(1,2,3,4),2))
View(fisher_results)
View(chisq_results)
a = unique(c(fisher_results[,1],fisher_results[,2]))
length(a)
view(a)
fisher_names = a
a = fisher_results[rownames(fisher_results) %in% fisher_names,]
View(a)
view(a)
view(fisher_names)
View(dat)
a = dat[rownames(dat) %in% fisher_names,]
View(a)
pheatmap::pheatmap(a)
View(a)
fisher_map = melt(a)
library(tidyverse)
fisher_map = melt(a)
library(reshape2)
fisher_map = melt(a)
View(fisher_map)
fisher_map = melt(setDT(a,keep.rownames = T),'rn')
??setDT
?setDT
library(reshape)
fisher_map = melt(setDT(a,keep.rownames = T),'rn')
library(plotly)
library(ggfortify)
library(gridExtra)
fisher_map = melt(setDT(a,keep.rownames = T),'rn')
library(reshape)
library(data.table)
fisher_map = melt(setDT(a,keep.rownames = T),'rn')
ggplot( dat_heatmap(), aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'exp',y = 'gene')+
theme(axis.text.y = element_text(size = 6))
ggplot( fisher_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'exp',y = 'gene')+
theme(axis.text.y = element_text(size = 6))
#heatmap
fisher_names = unique(c(fisher_results[,1],fisher_results[,2]))
library(data.table)
fisher_names = unique(c(fisher_results[,1],fisher_results[,2]))
fisher_map = melt(setDT(
dat[rownames(dat) %in% fisher_names,],
keep.rownames = T),'rn')
ggplot( fisher_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'exp',y = 'gene')+
theme(axis.text.y = element_text(size = 6))
ggplot( fisher_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes')+
theme(axis.text.y = element_text(size = 6))
ggplot( fisher_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes')+
theme(axis.text.y = element_text(size = 6),legend.title = element_blank())
ggplot( fisher_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes')+
theme(axis.text.y = element_text(size = 6))+
theme(legend.title = element_blank())
ggplot( fisher_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes')+
theme(axis.text.y = element_text(size = 6))+ theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot( fisher_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes')+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
ggplot( fisher_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
chisq_names = unique(c(chisq_results[,1],chisq_results[,2]))
chisq_map = melt(setDT(
dat[rownames(dat) %in% chisq_names,],
keep.rownames = T),'rn')
ggplot( chisq_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
library(tidyverse)
library(MRIcloudT1volumetrics)
roiDir = "C:/Users/lcqi/OneDrive/Desktop/mri/mri_proj/data"
fileList = dir(roiDir)
#type = 1, level = 1
# dat = dat %>% mutate(volume_demean = volume - mean(volume))%>% select(roi,volume_demean)%>% spread(roi,volume_demean)
dat = c()
for (i in 1:length(fileList)){
fullPath = paste(roiDir, fileList[i], sep = "/")
raw_dat = readSubject(fullPath) %>% subject2df()
dat_each = raw_dat %>% filter(type == 1, level == 1) %>% select(roi,volume) %>% spread(roi,volume)
dat = rbind(dat,dat_each)
}
dat_proportion = prop.table(as.matrix(dat),margin = 1) %>% log()
pca.result = prcomp(dat_proportion,scale. = T)
ev_p = get_eig(pca.result)
dat_proportion = prop.table(as.matrix(dat),margin = 1) %>% log()
pca.result = prcomp(dat_proportion,scale. = T)
ev_p = get_eig(pca.result)
??get_eig
library(factoextra)
library(factoextra)
dat_proportion = prop.table(as.matrix(dat),margin = 1) %>% log()
pca.result = prcomp(dat_proportion,scale. = T)
ev_p = get_eig(pca.result)
fviz_eig(pca.result)
summary(pca.result)
head(mtcars)
pca.result$rotation
class(pca.result$rotation)
dat_visualization = as.data.frame(pca.result$rotation)
head(dat_visualization)
melt(dat_visualization)
melt(as.matrix(dat_visualization))
dat_visualization = melt(pca.result$rotation)
head(dat_visualization)
ggplot(dat_vi, aes(x = as.factor(Var2),
y = value,
fill = as.factor(Var1))
) + geom_col() + labs(x = 'PC',y = 'roi')
ggplot(dat_visualization, aes(x = as.factor(Var2),
y = value,
fill = as.factor(Var1))
) + geom_col() + labs(x = 'PC',y = 'roi')
head(dat_visualization)
?abs
dat_visualization[,3] = abs(dat_visualization[,3])
ggplot(dat_visualization, aes(x = as.factor(Var2),
y = value,
fill = as.factor(Var1))
) + geom_col() + labs(x = 'PC',y = 'roi')
head(dat_visualization)
dat_visualization = melt(pca.result$rotation) %>% `colnames[1:2]<-` c('roi','PC')
dat_visualization = melt(pca.result$rotation) %>% `colnames[1:2]<-` ('roi','PC')
c('roi','PC')
dat_visualization = melt(pca.result$rotation) %>% `colnames<-` c('roi','PC','value')
dat_visualization = melt(pca.result$rotation) %>% `colnames<-` c(roi,PC,value)
dat_visualization = melt(pca.result$rotation) %>% `colnames[1]<-` 'roi'
head(dat_visualization)
colnames(dat_visualization) = c('roi','PC','value')
dat_visualization = melt(pca.result$rotation)
head(dat_visualization)
dat_visualization = melt(pca.result$rotation) %>% `colnames<-`('roi','PC','value')
dat_visualization = melt(pca.result$rotation) %>% `colnames<-`c('roi','PC','value')
dat_visualization = melt(pca.result$rotation) %>% `colnames<-` c('roi','PC','value')
dat_visualization = melt(pca.result$rotation) %>% `colnames<-` =c('roi','PC','value')
dat_visualization = melt(pca.result$rotation) %>% `colnames<-`
dat_visualization = melt(pca.result$rotation)
colnames(dat_visualization) = c('roi','PC','value')
dat_visualization[,3] = abs(dat_visualization[,3])
ggplot(dat_visualization, aes(x = as.factor(Var2),
y = value,
fill = as.factor(Var1))
) + geom_col()
ggplot(dat_visualization, aes(x = as.factor(PC),
y = value,
fill = as.factor(roi))
) + geom_col()
ggplot(dat_visualization, aes(x = as.factor(PC),
y = value,
fill = as.factor(roi))
) + geom_col() +theme(legend.title = element_blank())
ggplot(dat_visualization, aes(x = as.factor(PC),
y = value,
fill = as.factor(roi))
) + geom_col() +theme(legend.title = element_blank(),lab(x = 'PC'))
ggplot(dat_visualization, aes(x = as.factor(PC),
y = value,
fill = as.factor(roi))
) + geom_col() +theme(legend.title = element_blank()) + labs(x = 'PC')
ggplot(dat_visualization, aes(x = as.factor(PC),
y = value,
fill = as.factor(roi))
) + geom_col() +theme(legend.title = element_blank(),labs(x = 'PC'))
labs(x = 'PC')
ggplot(dat_visualization, aes(x = as.factor(PC),
y = value,
fill = as.factor(roi))
) + geom_col() +theme(legend.title = element_blank()) + labs(x = 'PC')
ggplot(dat_visualization, aes(x = as.factor(PC),
y = value,
fill = as.factor(roi))
) + geom_col() +theme(legend.title = element_blank()) + labs(x = 'PC', title = 'type1, level1')
head(dat_visualization)
shiny::runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/project_shiny_clustering')
shiny::runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/project_shiny_clustering')
setwd("C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/project_shiny_clustering")
df = read.table('expression.txt',header = 1,row.names = 1)
dat = cbind(df,kmeans(df,3)$cluster)
colnames(dat)[dim(dat)[2]] = 'Cluster'
dat = dat[order(dat$'Cluster'),][-dim(dat)[2]]
a = reshape2::melt(as.matrix(dat))
View(a)
class(a)
runApp()
rsconnect::appDependencies()
remove.packages("rsconnect")
