27.9
27.87
27.94
28.02
27.91
27.72
27.77
27.78
27.79
27.72
27.75
27.67
27.61
27.69
27.64
27.47
27.55
27.42
27.64
27.63
27.69
27.65
27.74
27.75
27.67
27.82
27.74
27.81
27.81
27.84
27.92
27.81
27.86
27.84
27.84
27.8
27.83
27.82
27.86
27.84
27.83
27.89
27.79
27.87
27.84
27.67
27.69
27.73
27.7
27.67
27.69
27.72
27.73
27.8
27.77
27.67
27.69
27.75
27.77
27.87
27.8
27.88
27.76
27.76
27.74
27.7
27.7
27.81
27.79
27.89
27.77
27.78
27.77
27.76
27.8
27.93
28
28.06
27.94
27.97
28.01
28.13
27.89
27.94
27.94
27.94
27.83
27.86
27.93
27.91
27.83
27.81
27.89
27.97
27.81
27.91
27.93
27.96
27.93
27.92
28
27.98
27.89
28
28
28.06
28
27.84
27.92
27.89
27.91
27.94
27.93
27.94
27.98
27.97
27.87
27.78
27.89
27.94
27.91
27.95
28.01
27.97
27.96
27.93
27.79
27.82
27.73
27.81
27.83,sep = '\t')
a = c(1,2,3,3,1,4,4,,2,23,23,4,1213,2,2,3,4,5,,6,1,23,5)
a = c(1,2,3,3,1,4,4,,2,23,23,4,1213,2,2,3,4,5,6,1,23,5)
hist(a,probability = 1)
a = c(1,2,3,3,1,4,4,2,23,23,4,1213,2,2,3,4,5,6,1,23,5)
hist(a,probability = 1)
hist(a)
a = c(1,2,3,3,1,4,4,2,23,23,4,12,13,2,2,3,4,5,6,1,23,5)
hist(a,probability = 1)
?kmeans
?faithful
shiny::runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/quiz5/Clustering')
runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/quiz5/Clustering')
install.packages(shinydashboard)
install.packages('shinydashboard')
install.packages('shinydashboard')
install.packages("shinydashboard")
updateR()
updateR()
runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/hw4_shiny/BMI')
runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/hw4_shiny/BMI')
runApp('C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/quiz5/Clustering')
updateR()
library(installr)
updateR()
updateR()
setInternet2(TRUE)
shiny::runApp('C:/Users/lcqi/OneDrive/Desktop/clustering')
runApp('C:/Users/lcqi/OneDrive/Desktop/clustering')
runApp('C:/Users/lcqi/OneDrive/Desktop/clustering')
?datatable
??datatable
runApp('C:/Users/lcqi/OneDrive/Desktop/clustering')
pca = prcomp(t(raw_dat), scale. = TRUE)
library(TCseq)
set.seed(100)
raw_dat = read.table('expression.txt',header = 1,row.names = 'name')
raw_dat = as.matrix(raw_dat)
dat <- timeclust(raw_dat, algo = "cm", k = 3, standardize = TRUE,iter.max=20)
#algorithm : fuzzy c means
p <- timeclustplot(dat, categories="time points", cols = 1,axis.text.size = 11)
cluster <- clustCluster(dat)
pca = prcomp(t(raw_dat), scale. = TRUE)
pca$rotation[,1:2]
#screeplot(pca, type="lines",col=3)
library(tidyverse)
library(ggfortify)
library(cluster)
dftemp = merge(raw_dat,as.data.frame(dat@cluster),by =0,all.x=T) #based on cluster from part(a)
df = dftemp[,-1]
rownames(df) = c(dftemp[,1])
# library(ggfortify)
# autoplot(prcomp(df), data = df, colour = 'dat$cluster')
autoplot(fanny(df[-11], 3), frame = TRUE)
library(plotly)
# library(ggfortify)
# autoplot(prcomp(df), data = df, colour = 'dat$cluster')
plot_ly(autoplot(fanny(df[-11], 3), frame = TRUE))
library(tidyverse)
library(ggfortify)
library(cluster)
library(plotly)
dftemp = merge(raw_dat,as.data.frame(dat@cluster),by =0,all.x=T) #based on cluster from part(a)
df = dftemp[,-1]
rownames(df) = c(dftemp[,1])
# library(ggfortify)
# autoplot(prcomp(df), data = df, colour = 'dat$cluster')
autoplot(fanny(df[-11], 3), frame = TRUE)
View(df)
df <- iris
df <- as.data.frame(iris)
View(df)
row.names(df) <- paste(df$Species, row.names(df), sep="_")
df$Species <- NULL
df_pca <- prcomp(df)
View(df_pca)
df_out <- as.data.frame(df_pca$x)
View(df_out)
df_out$group <- sapply( strsplit(as.character(row.names(df)), "_"), "[[", 1 )
head(df_out)
library(tidyverse)
library(ggfortify)
library(cluster)
library(plotly)
dftemp = merge(raw_dat,as.data.frame(dat@cluster),by =0,all.x=T) #based on cluster from part(a)
df = dftemp[,-1]
rownames(df) = c(dftemp[,1])
# library(ggfortify)
# autoplot(prcomp(df), data = df, colour = 'dat$cluster')
autoplot(fanny(df[-11], 3), frame = TRUE)
pca = prcomp(t(raw_dat), scale. = TRUE)
pca$rotation[,1:2]
#screeplot(pca, type="lines",col=3)
View(pca)
View(dftemp)
setwd("C:/Users/lcqi/OneDrive/Desktop/clustering")
df = read.table('expression.txt',header = 1,row.names = 1)
df_pca <- prcomp(df)
View(df_pca)
df_pca$x
df_pca <- prcomp(df)
df_out <- as.data.frame(df_pca$x)
View(df_pca)
View(df_out)
df <- iris
df <- as.data.frame(iris)
df_pca <- prcomp(df)
row.names(df) <- paste(df$Species, row.names(df), sep="_")
df$Species <- NULL
df_pca <- prcomp(df)
df_out <- as.data.frame(df_pca$x)
df_out$group <- sapply( strsplit(as.character(row.names(df)), "_"), "[[", 1 )
View(df_out)
ggplot(df_out,aes(x=PC1,y=PC2,color=group ))
df_out <- as.data.frame(df_pca$x)
df_out$group <- sapply( strsplit(as.character(row.names(df)), "_"), "[[", 1 )
ggplot(df_out,aes(x=PC1,y=PC2,color=group ))+geom_point()
View(df)
df_pca <- prcomp(df)
df_out <- as.data.frame(df_pca$x)
df_out$group <- sapply( strsplit(as.character(row.names(df)), "_"), "[[", 1 )
ggplot(df_out,aes(x=PC1,y=PC2,color=group ))+geom_point()
df_pca <- prcomp(df)
df_out <- as.data.frame(df_pca$x)
df_out$group <- sapply( strsplit(as.character(row.names(df)), "_"), "[[", 1 )
ggplot(df_out,aes(x=PC1,y=PC2,color=group ))+geom_point()
df_pca <- prcomp(df)
df_out <- as.data.frame(df_pca$x)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
set.seed(100)
raw_dat = read.table('expression.txt',header = 1,row.names = 'name')
raw_dat = as.matrix(raw_dat)
dat = kmeans(t(scale(t(raw_dat))),iter.max=20,centers = 3)
dat
library(tidyverse)
library(ggfortify)
library(cluster)
library(plotly)
pca = prcomp(t(raw_dat), scale. = TRUE)
# PCA = pca$rotation[,1:2]
dftemp = merge(raw_dat,as.data.frame(dat@cluster),by =0,all.x=T) #based on cluster from part(a)
library(TCseq)
set.seed(100)
raw_dat = read.table('expression.txt',header = 1,row.names = 'name')
raw_dat = as.matrix(raw_dat)
dat <- timeclust(raw_dat, algo = "cm", k = 3, standardize = TRUE,iter.max=20)
#algorithm : fuzzy c means
p <- timeclustplot(dat, categories="time points", cols = 1,axis.text.size = 11)
cluster <- clustCluster(dat)
library(TCseq)
set.seed(100)
raw_dat = read.table('expression.txt',header = 1,row.names = 'name')
raw_dat = as.matrix(raw_dat)
dat <- timeclust(raw_dat, algo = "cm", k = 3, standardize = TRUE,iter.max=20)
#algorithm : fuzzy c means
p <- timeclustplot(dat, categories="time points", cols = 1,axis.text.size = 11)
cluster <- clustCluster(dat)
library(tidyverse)
library(ggfortify)
library(cluster)
library(plotly)
pca = prcomp(t(raw_dat), scale. = TRUE)
# PCA = pca$rotation[,1:2]
dftemp = merge(raw_dat,as.data.frame(dat@cluster),by =0,all.x=T) #based on cluster from part(a)
df = dftemp[,-1]
rownames(df) = c(dftemp[,1])
# library(ggfortify)
# autoplot(prcomp(df), data = df, colour = 'dat$cluster')
autoplot(fanny(df[-11], 3), frame = TRUE)
View(df)
View(dftemp)
View(dat)
as.data.frame(dat@cluster)
runApp()
runApp()
dat = reactive({
dat = timeclust(as.matrix(df()),
algo = input$algo,
k = input$k,
standardize = TRUE,
iter.max=input$iter.max)
return(dat)
})
set.seed(100)
raw_dat = read.table('expression.txt',header = 1,row.names = 'name')
raw_dat = as.matrix(raw_dat)
dat = kmeans(t(scale(t(raw_dat))),iter.max=20,centers = 3)
dat
library(TCseq)
set.seed(100)
raw_dat = read.table('expression.txt',header = 1,row.names = 'name')
raw_dat = as.matrix(raw_dat)
dat <- timeclust(raw_dat, algo = "cm", k = 3, standardize = TRUE,iter.max=20)
#algorithm : fuzzy c means
p <- timeclustplot(dat, categories="time points", cols = 1,axis.text.size = 11)
cluster <- clustCluster(dat)
library(tidyverse)
library(ggfortify)
library(cluster)
library(plotly)
pca = prcomp(t(raw_dat), scale. = TRUE)
# PCA = pca$rotation[,1:2]
dftemp = merge(raw_dat,as.data.frame(dat@cluster),by =0,all.x=T) #based on cluster from part(a)
df = dftemp[,-1]
rownames(df) = c(dftemp[,1])
# library(ggfortify)
# autoplot(prcomp(df), data = df, colour = 'dat$cluster')
autoplot(fanny(df[-11], 3), frame = TRUE)
runApp()
View(dat)
View(raw_dat)
View(df)
df_pca <- prcomp(df)
df_out <- as.data.frame(df_pca$x)
df_out$group <- sapply( strsplit(as.character(row.names(df)), "_"), "[[", 1 )
ggplot(df_out,aes(x=PC1,y=PC2,color=group ))+geom_point()
View(df_out)
df_pca <- prcomp(df)
df_out <- as.data.frame(df_pca$x)
View(df_pca)
View(df_out)
View(dat)
# df_out$group <- sapply( strsplit(as.character(row.names(df)), "_"), "[[", 1 )
df_out = merge(df_out,as.data.frame(dat@cluster),by ='row.names',all.x=T)
df_pca <- prcomp(df)
df_out <- as.data.frame(df_pca$x)
# df_out$group <- sapply( strsplit(as.character(row.names(df)), "_"), "[[", 1 )
df_out = merge(df_out,as.data.frame(dat@cluster),by ='row.names',all.x=T)
ggplot(df_out,aes(x=PC1,y=PC2,color= dat@cluster ))+geom_point()
runApp()
runApp()
View(df)
dim(df)
dim(df)[2]
runApp()
runApp()
runApp()
?autoplot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(pca)
View(df)
df[-11]
View(df_out)
# PCA = pca$rotation[,1:2]
dftemp = merge(raw_dat,as.data.frame(dat@cluster),by =0,all.x=T) #based on cluster from part(a)
df = dftemp[,-1]
rownames(df) = c(dftemp[,1])
# library(ggfortify)
# autoplot(prcomp(df), data = df, colour = 'dat$cluster')
autoplot(fanny(df[-11], 3), frame = TRUE)
View(df)
runApp()
runApp()
paste('A','B')
paste0('A','B')
runApp()
runApp()
runApp()
runApp()
?ggplot
runApp()
?autoplot
dat@cluster
View(dat)
runApp()
runApp()
runApp()
runApp()
View(df)
prcomp(df)
a = prcomp(df)
View(a)
a$x
class(a$x)
head(iris)
df <- iris
df <- as.data.frame(iris)
row.names(df) <- paste(df$Species, row.names(df), sep="_")
df$Species <- NULL
head(df)
View(df)
df_pca <- prcomp(df)
View(df_pca)
df_out <- as.data.frame(df_pca$x)
df_out$group <- sapply( strsplit(as.character(row.names(df)), "_"), "[[", 1 )
head(df_out)
runApp()
df
dat = timeclust(as.matrix(df()),
algo = input$algo,
k = input$k,
standardize = TRUE,
iter.max=input$iter.max)
dat = timeclust(as.matrix(df),
algo = km,
k = 3,
standardize = TRUE,
iter.max=10)
dat = timeclust(as.matrix(df),
algo = 'km',
k = 3,
standardize = TRUE,
iter.max=10)
dat
pca = as.data.frame(dat$x)
pca = as.data.frame(dat@x)
dat
View(dat)
pca = as.data.frame(dat$cluster)
pca = as.data.frame(dat@cluster)
pca
merge(as.data.frame(prcomp(df)$x),pca,by ='row.names',all.x=T)
df_pca = merge(as.data.frame(prcomp(df)$x),pca,by ='row.names',all.x=T)
head(df_pca)
View(df_pca)
row.names(df_pca) = df_pca$Row.names
df_pca = df_pca[-1]
ggplot(df_pca,aes(x=PC1,y=PC2,color=dat@cluster ))
ggplot(df_pca,aes(x=PC1,y=PC2,color=dat@cluster ))+geom_point()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot_ly
runApp()
runApp()
library(dplyr)
a = left_join(mtcars, mtcars[,c("mpg",'cyl')], by=c("cyl"))
names(a)
head(mtcars)
?merge
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
